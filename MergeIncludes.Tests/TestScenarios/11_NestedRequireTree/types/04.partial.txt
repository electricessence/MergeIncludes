///////////////////////////////////////////////////
// SIGNALS FRAMEWORK NAMESPACE
///////////////////////////////////////////////////
// Elegant namespace pattern with hosted registry

// Create the singleton namespace instance with hosted registry
signals = SignalsFramework.new(
    SignalRegistry.new(
      array.new<SignalDefinition>(),
      array.new<SignalConfiguration>(),
      array.new<SignalGroup>()))

// Registry access methods
method getRegistry(SignalsFramework this) => this.registry
method register(SignalsFramework this, SignalDefinition definition) =>
    this.registry.definitions.push(definition)
    this

method register(SignalsFramework this, SignalConfiguration config) =>
    this.registry.configurations.push(config)
    this

method register(SignalsFramework this, SignalGroup group) =>
    this.registry.groups.push(group)
    this

// SignalsFramework namespace methods for creating definitions and configurations
method createDefinition(SignalsFramework this,
  string name, string description, float minValue, float maxValue, string category) =>
    SignalDefinition.new(name, description, minValue, maxValue, category)

method createConfiguration(SignalsFramework this,
  string signalName, string moduleName = "", float weight = 1.0) =>
    SignalConfiguration.new(
      signalName, moduleName, weight, 0.3, 0.7, "minmax", true)

method createRegistry(SignalsFramework this) =>
    SignalRegistry.new(
      array.new<SignalDefinition>(),
      array.new<SignalConfiguration>(),
      array.new<SignalGroup>())

method createGroup(SignalsFramework this, string name, string description) =>
    SignalGroup.new(
      name, description,
      array.new<SignalInstance>(),
      SignalInstance.new("", 0.0, 0.0, array.new<SignalThought>()))
