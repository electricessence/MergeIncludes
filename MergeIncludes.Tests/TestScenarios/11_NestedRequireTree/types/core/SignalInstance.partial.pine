// #require ./SignalThought.partial.pine

// SignalInstance - Pure numeric runtime output with optional thoughts
// @type SignalInstance
// @field name (simple string) Reference to SignalDefinition.name
// @field rawValue (series float) Pure numeric output (no interpretation)
// @field confidence (series float) Quality/reliability score 0.0-1.0
// @field thoughts (array<SignalThought>) Optional interpretation layers
type SignalInstance
    string name
    float rawValue
    float confidence
    array<SignalThought> thoughts

///////////////////////////////////////////////////
// SIGNALINSTANCE METHODS
///////////////////////////////////////////////////

// @function Gets the signal name
// @param this (SignalInstance) The SignalInstance instance
// @returns (string) The signal name identifier
method getName(SignalInstance this) => this.name

// @function Gets the raw signal value
// @param this (SignalInstance) The SignalInstance instance
// @returns (float) The raw numeric signal value
method getValue(SignalInstance this) => this.rawValue

// @function Gets the confidence level
// @param this (SignalInstance) The SignalInstance instance
// @returns (float) The confidence score (0.0-1.0)
method getConfidence(SignalInstance this) => this.confidence

// @function Gets the thoughts array
// @param this (SignalInstance) The SignalInstance instance
// @returns (array<SignalThought>) Array of associated thoughts/interpretations
method getThoughts(SignalInstance this) => this.thoughts

// @function Sets the raw signal value (fluent interface)
// @param this (SignalInstance) The SignalInstance instance
// @param value (float) New raw signal value
// @returns (SignalInstance) Self-reference for method chaining
method setValue(SignalInstance this, float value) =>
    this.rawValue := value
    this

// @function Sets the confidence level (fluent interface)
// @param this (SignalInstance) The SignalInstance instance
// @param confidence (float) New confidence score (0.0-1.0)
// @returns (SignalInstance) Self-reference for method chaining
method setConfidence(SignalInstance this, float confidence) =>
    this.confidence := confidence
    this

// @function Adds a new thought with sentiment and message (fluent interface)
// @param this (SignalInstance) The SignalInstance instance
// @param sentiment (string) Emoji-based sentiment ("😐", "🧐", "🚀", "⚠️", etc.)
// @param message (string) Human-readable interpretation message
// @returns (SignalInstance) Self-reference for method chaining
method addThought(SignalInstance this, string sentiment, string message) =>
    thought = SignalThought.new(sentiment = sentiment, message = message)
    array.push(this.thoughts, thought)
    this

// @function Adds an existing SignalThought object (fluent interface)
// @param this (SignalInstance) The SignalInstance instance
// @param thought (SignalThought) Pre-created SignalThought to add
// @returns (SignalInstance) Self-reference for method chaining
method addThoughtObj(SignalInstance this, SignalThought thought) =>
    array.push(this.thoughts, thought)
    this

// @function Checks if signal has any associated thoughts
// @param this (SignalInstance) The SignalInstance instance
// @returns (bool) True if thoughts array contains one or more elements
method hasThoughts(SignalInstance this) => array.size(this.thoughts) > 0

// @function Gets the total number of thoughts
// @param this (SignalInstance) The SignalInstance instance
// @returns (int) Count of thoughts in the thoughts array
method getThoughtCount(SignalInstance this) => array.size(this.thoughts)

// @function Gets a specific thought by index
// @param this (SignalInstance) The SignalInstance instance
// @param index (int) Zero-based index into thoughts array
// @returns (SignalThought) The thought at the specified index
method getThoughtAt(SignalInstance this, int index) =>
    array.get(this.thoughts, index)

// @function Removes all thoughts from the signal (fluent interface)
// @param this (SignalInstance) The SignalInstance instance
// @returns (SignalInstance) Self-reference for method chaining
method clearThoughts(SignalInstance this) =>
    array.clear(this.thoughts)
    this

// @function Checks if signal has any warning thoughts (⚠️ sentiment)
// @param this (SignalInstance) The SignalInstance instance
// @returns (bool) True if any thought has "⚠️" sentiment
method hasWarnings(SignalInstance this) =>
    for i = 0 to array.size(this.thoughts) - 1
        thought = array.get(this.thoughts, i)
        if thought.sentiment == "⚠️"
          true
    false

// @function Gets the most recently added thought
// @param this (SignalInstance) The SignalInstance instance
// @returns (SignalThought or na) Latest thought, or na if no thoughts exist
method getLatestThought(SignalInstance this) =>
    if array.size(this.thoughts) > 0
        array.get(this.thoughts, array.size(this.thoughts) - 1)
    else
        na

// @function Validates if signal has meaningful data
// @param this (SignalInstance) The SignalInstance instance
// @returns (bool) True if rawValue is not na and confidence is positive
method isValid(SignalInstance this) =>
    not na(this.rawValue) and this.confidence > 0.0

// @function Categorizes signal strength based on confidence level
// @param this (SignalInstance) The SignalInstance instance
// @returns (string) Strength category: "invalid", "weak", "moderate", or "strong"
method getStrengthCategory(SignalInstance this) =>
    if na(this.rawValue)
        "invalid"
    else if this.confidence < 0.3
        "weak"
    else if this.confidence < 0.7
        "moderate"
    else
        "strong"
