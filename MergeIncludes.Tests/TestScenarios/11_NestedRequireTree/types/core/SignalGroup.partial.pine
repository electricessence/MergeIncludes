// #require ./SignalInstance.partial.pine

// SignalGroup - Group of related signals with aggregated computation and inherited thoughts
// @type SignalGroup
// @field name (simple string) Group identifier (e.g., "Trend", "Entry", "Exit")
// @field description (simple string) Group purpose description
// @field signals (array<SignalInstance>) Member signals
// @field aggregatedSignal (SignalInstance) Aggregated as a single signal instance
type SignalGroup
    string name
    string description
    array<SignalInstance> signals
    SignalInstance aggregatedSignal

///////////////////////////////////////////////////
// SIGNALGROUP METHODS
///////////////////////////////////////////////////

// @function Gets the group name identifier
// @param this (SignalGroup) The SignalGroup instance
// @returns (string) The group name
method getName(SignalGroup this) => this.name

// @function Gets the group description
// @param this (SignalGroup) The SignalGroup instance
// @returns (string) Human-readable description of the group's purpose
method getDescription(SignalGroup this) => this.description

// @function Gets the signals array
// @param this (SignalGroup) The SignalGroup instance
// @returns (array<SignalInstance>) Array of all signals in this group
method getSignals(SignalGroup this) => this.signals

// @function Gets the aggregated signal result
// @param this (SignalGroup) The SignalGroup instance
// @returns (SignalInstance) The computed aggregate signal for the group
method getAggregatedSignal(SignalGroup this) => this.aggregatedSignal

// @function Sets the group description (fluent interface)
// @param this (SignalGroup) The SignalGroup instance
// @param description (string) New description for the group
// @returns (SignalGroup) Self-reference for method chaining
method setDescription(SignalGroup this, string description) =>
    this.description := description
    this

// @function Adds a signal to the group (fluent interface)
// @param this (SignalGroup) The SignalGroup instance
// @param signal (SignalInstance) Signal to add to the group
// @returns (SignalGroup) Self-reference for method chaining
method addSignal(SignalGroup this, SignalInstance signal) =>
    array.push(this.signals, signal)
    this

// @function Removes a signal from the group by name (fluent interface)
// @param this (SignalGroup) The SignalGroup instance
// @param signalName (string) Name of the signal to remove
// @returns (SignalGroup) Self-reference for method chaining
method removeSignal(SignalGroup this, string signalName) =>
    for i = array.size(this.signals) - 1 to 0
        signal = array.get(this.signals, i)
        if signal.name == signalName
            array.remove(this.signals, i)
            break
    this

// @function Checks if group contains a signal with the specified name
// @param this (SignalGroup) The SignalGroup instance
// @param signalName (string) Name of the signal to search for
// @returns (bool) True if signal exists in the group
method hasSignal(SignalGroup this, string signalName) =>
    for i = 0 to array.size(this.signals) - 1
        signal = array.get(this.signals, i)
        if signal.name == signalName
            true
    false

// @function Gets the total number of signals in the group
// @param this (SignalGroup) The SignalGroup instance
// @returns (int) Count of signals in the group
method getSignalCount(SignalGroup this) =>
    array.size(this.signals)

// @function Gets a signal by index position
// @param this (SignalGroup) The SignalGroup instance
// @param index (int) Zero-based index into the signals array
// @returns (SignalInstance) The signal at the specified index
method getSignalAt(SignalGroup this, int index) => array.get(this.signals, index)

// @function Checks if the group has no signals
// @param this (SignalGroup) The SignalGroup instance
// @returns (bool) True if signals array is empty
method isEmpty(SignalGroup this) => array.size(this.signals) == 0

// @function Removes all signals from the group (fluent interface)
// @param this (SignalGroup) The SignalGroup instance
// @returns (SignalGroup) Self-reference for method chaining
method clear(SignalGroup this) =>
    array.clear(this.signals)
    this

// @function Checks if group contains at least one valid signal
// @param this (SignalGroup) The SignalGroup instance
// @returns (bool) True if any signal in the group passes isValid() check
method hasValidSignals(SignalGroup this) =>
    for i = 0 to array.size(this.signals) - 1
        signal = array.get(this.signals, i)
        if signal.isValid()
            true
    false

// @function Gets array of all valid signals in the group
// @param this (SignalGroup) The SignalGroup instance
// @returns (array<SignalInstance>) New array containing only valid signals
method getValidSignals(SignalGroup this) =>
    validSignals = array.new<SignalInstance>()
    for i = 0 to array.size(this.signals) - 1
        signal = array.get(this.signals, i)
        if signal.isValid()
            array.push(validSignals, signal)
    validSignals

// @function Counts signals in the group that have warning thoughts
// @param this (SignalGroup) The SignalGroup instance
// @returns (int) Number of signals containing warnings (⚠️ sentiment thoughts)
method getTotalWarnings(SignalGroup this) =>
    warningCount = 0
    for i = 0 to array.size(this.signals) - 1
        signal = array.get(this.signals, i)
        if signal.hasWarnings()
            warningCount += 1
    warningCount
