// #require ./SignalDefinition.partial.pine
// #require ./SignalConfiguration.partial.pine
// #require ./SignalGroup.partial.pine
// #require ./SignalInstance.partial.pine
// #require ./SignalRegistry.partial.pine

// SignalsFramework - Static namespace with hosted registry for framework operations
// @type SignalsFramework
// @field registry (SignalRegistry) Hosted registry for signals
type SignalsFramework
    SignalRegistry registry

///////////////////////////////////////////////////
// SIGNALSFRAMEWORK METHODS
///////////////////////////////////////////////////
// SIGNALSFRAMEWORK METHODS
///////////////////////////////////////////////////

// @function Gets the hosted registry instance
// @param this (SignalsFramework) The SignalsFramework instance
// @returns (SignalRegistry) The hosted registry containing all definitions, configurations, and groups
method getRegistry(SignalsFramework this) => this.registry

// @function Registers a signal definition with the hosted registry (fluent interface)
// @param this (SignalsFramework) The SignalsFramework instance
// @param definition (SignalDefinition) Definition to register
// @returns (SignalsFramework) Self-reference for method chaining
method register(SignalsFramework this, SignalDefinition definition) =>
    this.registry.addDefinition(definition)
    this

// @function Registers a signal configuration with the hosted registry (fluent interface)
// @param this (SignalsFramework) The SignalsFramework instance
// @param config (SignalConfiguration) Configuration to register
// @returns (SignalsFramework) Self-reference for method chaining
method register(SignalsFramework this, SignalConfiguration config) =>
    this.registry.addConfiguration(config)
    this

// @function Registers a signal group with the hosted registry (fluent interface)
// @param this (SignalsFramework) The SignalsFramework instance
// @param group (SignalGroup) Group to register
// @returns (SignalsFramework) Self-reference for method chaining
method register(SignalsFramework this, SignalGroup group) =>
    this.registry.addGroup(group)
    this

// @function Factory method to create a new signal definition
// @param this (SignalsFramework) The SignalsFramework instance
// @param name (string) Unique identifier for the signal
// @param description (string) Human-readable description of signal purpose
// @param minValue (float) Minimum expected value for the signal
// @param maxValue (float) Maximum expected value for the signal
// @param category (string) Signal category for grouping (e.g., "trend", "momentum", "volume")
// @returns (SignalDefinition) New signal definition ready for registration
method createDefinition(SignalsFramework this,
  string name, string description, float minValue, float maxValue, string category) =>
    SignalDefinition.new(name, description, minValue, maxValue, category)

// @function Factory method to create a new signal configuration with defaults
// @param this (SignalsFramework) The SignalsFramework instance
// @param signalName (string) Name of the signal this configuration applies to
// @param moduleName (string) Optional module name for scoped configurations (default "")
// @param weight (float) Aggregation weight for this signal (default 1.0)
// @returns (SignalConfiguration) New configuration with standard thresholds and normalization
method createConfiguration(SignalsFramework this,
  string signalName, string moduleName = "", float weight = 1.0) =>
    SignalConfiguration.new(
      signalName, moduleName, weight, 0.3, 0.7, "minmax", true)

// @function Factory method to create a new signal registry with empty maps
// @param this (SignalsFramework) The SignalsFramework instance
// @returns (SignalRegistry) New registry with empty maps for definitions, configurations, and groups
method createRegistry(SignalsFramework this) =>
    SignalRegistry.new(
      map.new<string, SignalDefinition>(),
      map.new<string, SignalConfiguration>(),
      map.new<string, SignalGroup>())

// @function Factory method to create a new signal group with empty aggregated signal
// @param this (SignalsFramework) The SignalsFramework instance
// @param name (string) Group identifier
// @param description (string) Purpose description for the group
// @returns (SignalGroup) New group with empty signals array and placeholder aggregated signal
method createGroup(SignalsFramework this, string name, string description) =>
    SignalGroup.new(
      name, description,
      array.new<SignalInstance>(),
      SignalInstance.new("", 0.0, 0.0, array.new<SignalThought>()))
